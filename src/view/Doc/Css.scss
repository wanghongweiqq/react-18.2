/* stylelint-disable function-no-unknown */

/*
 * @Author: 王宏伟
 * @Email：wanghongwei@hualala.com
 * @Date: 2024-07-30 10:35:01
 * @Description: css常规样式
 * @FilePath: /react-18.2/src/view/Doc/Css.scss
 */

.pg-css {
  .red {
    color: $color-danger;
  }

  .bold {
    font-weight: bold;
  }

  .padding-top-10 {
    padding-top: 10px;
  }

  %font-important-basic {
    color: $color-danger;
  }

  .font-important-1 {
    @extend %font-important-basic;

    text-decoration: line-through;
  }

  .font-important-2 {
    @extend %font-important-basic;

    text-decoration: underline;
  }

  .before-after-normal {
    &::before {
      color: $color-success;
      content: "你好，";
    }

    &::after {
      display: inline-block;
      width: 0;
      height: 0;
      margin-left: 10px;
      overflow: hidden;
      vertical-align: middle;
      content: "";
      border-color: transparent transparent $color-success;
      border-style: solid;
      border-width: 0 5px 9px;
      transition: all 0.4s;
    }

    &:hover::after {
      border-bottom-color: $color-danger;
    }
  }

  .before-after-placeholder {
    padding: 10px;
    margin-top: 10px;
    border: 1px solid $color-e;

    &:empty::before {
      color: #ccc;
      content: "请输入内容";
    }
  }

  .before-after-content-attr {
    a::after {
      content: "链接为（" attr(href) "），标题为（" attr(title) "）";
    }
  }

  .before-after-content-quotes {
    quotes: "\"" ")"; /* 添加双引号要转义 */
    &::before {
      content: open-quote;
    }

    &::after {
      content: close-quote;
    }
  }

  .before-after-content-counter-increment {
    li {
      counter-increment: item;

      &::before {
        content: counter(item) ". ";
      }
    }
  }

  .before-after-content-counter-reset {
    >* {
      padding: 4px 0;
    }

    .item-h1 {
      font-size: $font-size-normal + 2;
      font-weight: bold;
      counter-reset: item-h2;
      counter-increment: item-h1;

      &::before {
        content: counter(item-h1) ". ";
      }
    }

    .item-h2 {
      padding-left: 20px;
      counter-reset: item-h3;
      counter-increment: item-h2;

      &::before {
        content: counter(item-h1) "-"counter(item-h2) ". ";
      }
    }

    .item-h3 {
      padding-left: 40px;
      font-size: $font-size-normal - 2;
      counter-increment: item-h3;

      &::before {
        content: counter(item-h1) "-"counter(item-h2) "-"counter(item-h3) ". ";
      }
    }
  }

  .first-line {
    &::first-line {
      color: $color-success;
    }
  }

  .first-letter {
    &::first-letter {
      color: $color-success;
      initial-letter: 2;
    }
  }

  .selection {
    &::selection {
      color: $color-0;
      text-shadow: 3px 0 0 $color-warning;
      background-color: $color-success;
    }
  }

  .placeholder {
    >* {
      &::placeholder {
        color: $color-success;
      }
    }
  }

  .pseudo-class {
    a,
    span {
      &:link {
        color: $color-success;
      }

      &:visited {
        color: $color-danger;
      }

      &:hover {
        color: $color-primary;
      }

      &:active {
        color: $color-warning;
      }
    }

    input {
      padding: 2px 4px;
      border-width: 1px;

      &.focus {
        background-color: $color-e;

        &:focus {
          background-color: $color-f;
        }
      }
    }

    p {
      >ins {
        display: inline-block;
        width: 20px;
        height: 20px;
        margin-right: 10px;
        vertical-align: top;
        background-color: $color-9;
      }
    }

    .first-child {
      :first-child {
        background-color: $color-success;
      }
    }

    .last-child {
      :last-child {
        background-color: $color-success;
      }
    }

    .nth-child-1 {
      :nth-child(1) {
        background-color: $color-success;
      }
    }

    .nth-child-nadd3 {
      :nth-child(n+3) {
        background-color: $color-success;
      }
    }

    .nth-child-top-3 {
      :nth-child(-n+3) {
        background-color: $color-success;
      }
    }

    .nth-child-even {
      :nth-child(2n) {
        background-color: $color-success;
      }
    }

    .nth-child-odd {
      :nth-child(2n+1) {
        background-color: $color-success;
      }
    }

    .nth-last-child-1 {
      :nth-last-child(1) {
        background-color: $color-success;
      }
    }

    .nth-last-child-nadd3 {
      :nth-last-child(n+3) {
        background-color: $color-success;
      }
    }

    .nth-last-child-top-3 {
      :nth-last-child(-n+3) {
        background-color: $color-success;
      }
    }

    .nth-last-child-even {
      :nth-last-child(2n) {
        background-color: $color-success;
      }
    }

    .nth-last-child-odd {
      :nth-last-child(2n+1) {
        background-color: $color-success;
      }
    }

    .only-child {
      :only-child {
        background-color: $color-success;
      }
    }

    .first-of-type {
      :first-of-type {
        background-color: $color-success;
      }
    }

    .last-of-type {
      :last-of-type {
        background-color: $color-success;
      }
    }

    .nth-of-type-1 {
      :nth-of-type(1) {
        background-color: $color-success;
      }
    }

    .nth-of-type-top-3 {
      :nth-of-type(-n+3) {
        background-color: $color-success;
      }
    }

    .nth-last-of-type-1 {
      :nth-last-of-type(1) {
        background-color: $color-success;
      }
    }

    .nth-last-of-type-top-3 {
      :nth-last-of-type(-n+3) {
        background-color: $color-success;
      }
    }

    .only-of-type {
      :only-of-type {
        background-color: $color-success;
      }
    }

    .empty {
      :empty {
        background-color: $color-success;
      }
    }

    .not {
      ins:not(:first-child) {
        background-color: $color-success;
      }

      ins:not(.no) {
        background-color: $color-success;
      }
    }

    .not-1 {
      ins:not(:first-child) {
        background-color: $color-success;
      }
    }

    .not-2 {
      ins:not(.no) {
        background-color: $color-success;
      }
    }

    .has {
      >p:has(.a, .c) {
        ins {
          background-color: $color-success;
        }
      }

      >h4:has(+h4) {
        color: $color-success;
      }

      >p:has(span:not(.x)) {
        color: $color-success;
      }
    }

    .is :is(.is-1, .is-2) {
      :is(i, span) {
        color: $color-success;
      }
    }

    .is :is(p, #is-3) {
      :is(i, span) {
        color: $color-danger;
      }
    }

    .where :where(.where-1, .where-2) {
      :where(i, span) {
        color: $color-success;
      }

      :is(i, span) {
        color: $color-warning;
      }
    }

    .where :where(p, #where-3) {
      :where(i, span) {
        color: $color-danger;
      }
    }

    .status {
      >* {
        margin-right: 10px;
      }

      input {
        color: $color-6;
      }

      input:enabled {
        color: $color-3;
      }

      input:disabled {
        color: $color-9;
      }

      input:checked {
        accent-color: $color-success;
      }

      label:has(input:checked) {
        color: $color-success;
      }

      input:valid {
        background-color: $color-success;
      }

      input:invalid {
        background-color: $color-danger;
      }
    }
  }

  :target {
    background-color: yellow;
    animation: fade-in 3s ease-in-out;
  }

  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }

  .ellipsis {
    display: block;
    padding-bottom: 0;
    margin-bottom: 6px;
  }

  /* stylelint-disable-next-line value-keyword-case */
}
$a:
  ("small": 12px, "normal": 18px, "large": 24px);
$b: quote(unit(12abc2王宏伟));

.to-lower-case {
  &::before {
    content: $b;
  }
}

/* 实现由px到em的转化 */
@function px-to-em($px, $base-font-size: 14px) {
  @if (unitless($px)) {
    @warn "#{$px} 定义为像素px，请使用像素的参数值";

    @return px-to-em($px + 0);
  }

  @else if (unit($px)==em) {
    @return $px;
  }

  @return ($px / $base-font-size) * 1em;
}

.px-to-em-600 {
  width: px-to-em(600px);
}
